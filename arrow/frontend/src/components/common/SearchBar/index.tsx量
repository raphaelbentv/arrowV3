import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Search } from 'lucide-react';
import { Input } from '@/components/ui/input';
import { Loader2 } from 'lucide-react';
import { Intervenant } from '../../../types/intervenant';

export interface SearchResult {
  id: string;
  type: 'intervenant' | 'formation' | 'document' | 'session';
  title: string;
  description: string;
  data?: any;
}

interface SearchBarProps {
  data?: Intervenant[];
  onSearch?: (query: string) => void;
  loading?: boolean;
  placeholder?: string;
  fullWidth?: boolean;
  customStyles?: React.CSSProperties;
  onResultClick?: (result: SearchResult) => void;
}

const SearchBar = ({
  data = [],
  onSearch,
  loading = false,
  placeholder = "Rechercher...",
  fullWidth = true,
  customStyles,
  onResultClick
}: SearchBarPropsæ‹³ {
  const navigate = useNavigate();
  const [searchResults, setSearchResults] = useState<SearchResult[]>([]);
  const [inputValue, setInputValue] = useState('');
  const [showResults, setShowResults] = useState(false);

  const handleSearch = (query: string) => {
    setInputValue(query);
    
    if (!query) {
      setSearchResults([]);
      setShowResults(false);
      if (onSearch) onSearch('');
      return;
    }

    const queryLower = query.toLowerCase();
    
    // Recherche dans les intervenants
    const results = data
      .filter(intervenant => 
        intervenant?.nom?.toLowerCase().includes(queryLower) ||
        intervenant?.prenom?.toLowerCase().includes(queryLower) ||
        intervenant.email?.toLowerCase().includes(queryLower) ||
        (intervenant.modulesEnseignes && 
         intervenant.modulesEnseignes.some(module => 
           module.toLowerCase().includes(queryLower)
         )) ||
        (intervenant.domainesExpertise && 
         intervenant.domainesExpertise.some(domaine => 
           domaine.toLowerCase().includes(queryLower)
         ))
      )
      .map(intervenant => ({
        id: intervenant._id,
        type: 'intervenant' as const,
        title: `${intervenant.prenom} ${intervenant.nom}`,
        description: intervenant.poste || 'Intervenant',
        data: intervenant
      }));

    setSearchResults(results);
    setShowResults(results.length > 0);
    if (onSearch) onSearch(query);
  };

  const handleResultClick = (result: SearchResult) => {
    setShowResults(false);
    setInputValue('');

    if (onResultClick) {
      onResultClick(result);
    } else if (result.type === 'intervenant') {
      navigate(`/intervenants/${result.id}`);
    }
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    handleSearch(value);
  };

  return (
    <div className={`relative ${fullWidth ? 'w-full' : ''}`} style={customStyles}>
      <div className="relative">
        <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
        <Input
          type="text"
          placeholder={placeholder}
          value={inputValue}
          onChange={handleInputChange}
          className="pl-10 pr-10"
        />
        {loading && (
          <Loader2 className="absolute right-3 top-1/2 -translate-y-1/2 h-4 w-4 animate-spin text-muted-foreground" />
        )}
      </div>

      {showResults && searchResults.length > 0 && (
        <div className="absolute z-50 w-full mt-2 bg-popover border border-border rounded-lg shadow-lg max-h-[400px] overflow-y-auto">
          {searchResults.map((result) => (
            <div
              key={result.id}
              onClick={() => handleResultClick(result)}
              className="px-4 py-3 hover:bg-accent cursor-pointer transition-colors border-b border-border last:border-0"
            >
              <div className="font-medium text-sm">{result.title}</div>
              <div className="text-xs text-muted-foreground mt-1">
                {result.type === 'intervenant' ? 'ðŸ‘¤ Intervenant' : ''} - {result.description}
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default SearchBar;

